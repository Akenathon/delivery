@mixin opacity($opacity: 1)
{
	-moz-opacity: $opacity;
	-khtml-opacity: $opacity;
	-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$opacity*100})";
	filter: alpha(opacity=#{$opacity*100});
	opacity: $opacity;
}



@mixin border-radius($radius)
{
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	-khtml-border-radius: $radius;
	border-radius: $radius;
}

	@mixin border-top-left-radius($radius)
	{
		-webkit-border-top-left-radius: $radius;
		-moz-border-radius-topleft: $radius;
		-khtml-border-top-left-radius: $radius;
		border-top-left-radius: $radius;
	}
	
	@mixin border-top-right-radius($radius)
	{
		-webkit-border-top-right-radius: $radius;
		-moz-border-radius-topright: $radius;
		-khtml-border-top-right-radius: $radius;
		border-top-right-radius: $radius;
	}
	
	@mixin border-bottom-left-radius($radius)
	{
		-webkit-border-bottom-left-radius: $radius;
		-moz-border-radius-bottomleft: $radius;
		-khtml-border-bottom-left-radius: $radius;
		border-bottom-left-radius: $radius;
	}
	
	@mixin border-bottom-right-radius($radius)
	{
		-webkit-border-bottom-right-radius: $radius;
		-moz-border-radius-bottomright: $radius;
		-khtml-border-bottom-right-radius: $radius;
		border-bottom-right-radius: $radius;
	}



@mixin box-shadow($value: "")
{
	@if type-of($value) == string { $value: unquote($value); }

	-webkit-box-shadow: $value;
	-moz-box-shadow: $value;
	-ms-box-shadow: $value;
	-o-box-shadow: $value;
	box-shadow: $value;
}

@mixin linear-gradient($direction, $startColor, $startColorPerc, $endColor, $endColorPerc, $endDirection: "")
{
	@if $direction == "left top" { $endDirection: left bottom }

	background: $endColor;
	background: -webkit-gradient(linear, $direction, $endDirection, color-stop($startColorPerc,$startColor), color-stop($endColorPerc,$endColor));
	background: -webkit-linear-gradient($direction, $startColor $startColorPerc, $endColor $endColorPerc);
	background: -moz-linear-gradient($direction, $startColor $startColorPerc, $endColor $endColorPerc);
	background: -o-linear-gradient($direction, $startColor $startColorPerc, $endColor $endColorPerc);
	background: -ms-linear-gradient($direction, $startColor $startColorPerc, $endColor $endColorPerc);
	background: linear-gradient($direction, $startColor $startColorPerc, $endColor $endColorPerc);
}



@mixin transform($value: "")
{
	@if type-of($value) == string { $value: unquote($value); }

	-webkit-transform: $value;
	-moz-transform: $value;
	-o-transform: $value;
	transform: $value;
}

	@mixin transform-origin($value: "")
	{
		@if type-of($value) == string { $value: unquote($value); }
	
		-webkit-transform-origin: $value;
		-moz-transform-origin: $value;
		-o-transform-origin: $value;
		transform-origin: $value;
	}



@mixin transition($value: "")
{
	@if type-of($value) == string { $value: unquote($value); }

	-webkit-transition: $value;
	-moz-transition: $value;
	transition: $value;
}

	@mixin transition-property($value: "")
	{
		@if type-of($value) == string { $value: unquote($value); }
		
		-webkit-transition-property: $value;
		-moz-transition-property: $value;
		transition-property: $value;
	}
	
	@mixin transition-duration($value: "")
	{
		@if type-of($value) == string { $value: unquote($value); }
	
		-webkit-transition-duration: $value;
		-moz-transition-duration: $value;
		transition-duration: $value;
	}
	
	@mixin transition-timing-function($value: "")
	{
		@if type-of($value) == string { $value: unquote($value); }
		
		-webkit-transition-timing-function: $value;
		-moz-transition-timing-function: $value;
		transition-timing-function: $value;
	}
	
	@mixin transition-delay($value: "")
	{
		@if type-of($value) == string { $value: unquote($value); }
		
		-webkit-transition-delay: $value;
		-moz-transition-delay: $value;
		transition-delay: $value;
	}



@mixin animation($value: "")
{
	@if type-of($value) == string { $value: unquote($value); }

	-webkit-animation: $value;
	-moz-animation: $value;
	-ms-animation: $value;
	-o-animation: $value;
	animation: $value;
}

	@mixin animation-name($value: "")
	{
		@if type-of($value) == string { $value: unquote($value); }
	
		-webkit-animation-name: $value;
		-moz-animation-name: $value;
		-ms-animation-name: $value;
		-o-animation-name: $value;
		animation-name: $value;
	}
	
	@mixin animation-duration($value: "")
	{
		@if type-of($value) == string { $value: unquote($value); }
	
		-webkit-animation-duration: $value;
		-moz-animation-duration: $value;
		-ms-animation-duration: $value;
		-o-animation-duration: $value;
		animation-duration: $value;
	}
	
	@mixin animation-timing-function($value: "")
	{
		@if type-of($value) == string { $value: unquote($value); }
	
		-webkit-animation-timing-function: $value;
		-moz-animation-timing-function: $value;
		-ms-animation-timing-function: $value;
		-o-animation-timing-function: $value;
		animation-timing-function: $value;
	}
	
	@mixin animation-iteration-count($value: "")
	{
		@if type-of($value) == string { $value: unquote($value); }
	
		-webkit-animation-iteration-count: $value;
		-moz-animation-iteration-count: $value;
		-ms-animation-iteration-count: $value;
		-o-animation-iteration-count: $value;
		animation-iteration-count: $value;
	}
	
	@mixin animation-direction($value: "")
	{
		@if type-of($value) == string { $value: unquote($value); }
	
		-webkit-animation-direction: $value;
		-moz-animation-direction: $value;
		-ms-animation-direction: $value;
		-o-animation-direction: $value;
		animation-direction: $value;
	}
	
	@mixin animation-delay($value: "")
	{
		@if type-of($value) == string { $value: unquote($value); }
	
		-webkit-animation-delay: $value;
		-moz-animation-delay: $value;
		-ms-animation-delay: $value;
		-o-animation-delay: $value;
		animation-delay: $value;
	}



@mixin display-box()
{
	display: -webkit-box;
	display: -moz-box;
	display: box;
}

	@mixin box-orient($value)
	{
		-webkit-box-orient: $value;
		-moz-box-orient: $value;
		box-orient: $value;
	}
	
	@mixin box-align($value)
	{
		-webkit-box-align: $value;
		-moz-box-align: $value;
		box-align: $value;
	}
	
	@mixin box-pack($value)
	{
		-webkit-box-pack: $value;
		-moz-box-pack: $value;
		box-pack: $value;
	}
	
	@mixin box-flex($value)
	{
		-webkit-box-flex: $value;
		-moz-box-flex: $value;
		box-flex: $value;
	}
	
@mixin box-sizing($value)
{
	-webkit-box-sizing: $value;
	-moz-box-sizing: $value;
	-ms-box-sizing: $value;
	box-sizing: $value;
}

@mixin background-size($value)
{
	-webkit-background-size: $value;
	-moz-background-size: $value;
	-khtml-background-size: $value;
	-o-background-size: $value;
	background-size: $value;
}

// Clearfix Micro
	
@mixin cf()
{
	&:before,
	&:after {
	    content:"";
	    display:block;
	    overflow:hidden;
	}
	
	&:after {
	    clear:both;
	}
	
	& {
	    zoom:1;
	}
}


// Min Width

@mixin min-width($value)
{
	// For good browsers
    & { min-width: $value; }
    
    // For IE6
    * html & 
    {
    	width: auto;
    }
}

@mixin min-height($value)
{
	// For good browsers
    & { min-height: $value; }
    
    // For IE6
    * html & 
    {
    	height: auto;
    }
}


//
// 	CSS3 Multi column layout
// 	@see http://www.css3.info/preview/multi-column-layout/
//

@mixin column-width($width)
{
	-moz-column-width: $width;
	-webkit-column-width: $width;
	column-width: $width;
}

@mixin column-count($value)
{
	-moz-column-count: $value;
	-webkit-column-count: $value;
	column-count: $value;
}

@mixin column-rule($value)
{
	-moz-column-rule: $value;
	-webkit-column-rule: $value;
	column-rule: $value;
}

@mixin column-gap($value)
{
	-moz-column-gap: $value;
	-webkit-column-gap: $value;
	column-gap: $value;
}